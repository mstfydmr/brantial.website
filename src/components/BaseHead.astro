---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import '@/styles/global.css';
import {
  SITE_TITLE,
  SITE_METADATA,
  ORGANIZATION,
  SOCIAL_LINKS,
} from '../consts';

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image } = Astro.props;
const finalTitle = title || SITE_METADATA.title.default;
const finalDescription = description || SITE_METADATA.description;
const finalImage = image || SITE_METADATA.openGraph.images[0].url;
const imageURL = new URL(finalImage, Astro.url);
---

<!-- Global Metadata -->
<meta charset="utf-8" />

<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta
  name="robots"
  content={`${SITE_METADATA.robots.index ? 'index' : 'noindex'}, ${SITE_METADATA.robots.follow ? 'follow' : 'nofollow'}`}
/>
<meta name="keywords" content={SITE_METADATA.keywords.join(', ')} />
<meta name="author" content={SITE_METADATA.authors[0].name} />
<meta name="creator" content={SITE_METADATA.creator} />
<meta name="publisher" content={SITE_METADATA.publisher} />

<!-- Theme Script -->
<script is:inline>
  const savedTheme = localStorage.getItem('theme');
  const initialTheme = savedTheme || 'light';
  document.documentElement.classList.toggle('dark', initialTheme === 'dark');
</script>

<!-- Favicon -->
<link rel="icon" href="/favicon/favicon.ico" type="image/x-icon" />

<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL('rss.xml', Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{finalTitle}</title>
<meta name="title" content={finalTitle} />
<meta name="description" content={finalDescription} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:site_name" content={SITE_METADATA.openGraph.siteName} />
<meta property="og:title" content={finalTitle} />
<meta property="og:description" content={finalDescription} />
<meta property="og:image" content={imageURL} />
<meta
  property="og:image:width"
  content={SITE_METADATA.openGraph.images[0].width.toString()}
/>
<meta
  property="og:image:height"
  content={SITE_METADATA.openGraph.images[0].height.toString()}
/>
<meta property="og:image:alt" content={SITE_METADATA.openGraph.images[0].alt} />

<!-- Twitter -->
<meta property="twitter:card" content={SITE_METADATA.twitter.card} />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={finalTitle} />
<meta property="twitter:description" content={finalDescription} />
<meta property="twitter:image" content={imageURL} />
<meta property="twitter:creator" content={SITE_METADATA.twitter.creator} />

<!-- Website schema JSON-LD -->
<script
  type="application/ld+json"
  set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'WebSite',
    name: SITE_METADATA.title.default,
    url: Astro.site,
    description: SITE_METADATA.description,
    publisher: {
      '@type': 'Organization',
      name: ORGANIZATION.name || SITE_METADATA.publisher,
    },
    sameAs: SOCIAL_LINKS,
  })}
/>

<!-- Organization schema JSON-LD -->
<script
  type="application/ld+json"
  set:html={JSON.stringify({
    '@context': 'https://schema.org',
    '@type': 'Organization',
    name:
      ORGANIZATION.name ||
      SITE_METADATA.publisher ||
      SITE_METADATA.title.default,
    legalName: ORGANIZATION.legalName,
    url: ORGANIZATION.url || Astro.site,
    logo: new URL(
      ORGANIZATION.logoUrl || SITE_METADATA.icons.icon[1].url,
      Astro.site,
    ).toString(),
    foundingDate: ORGANIZATION.foundingDate,
    founder: (ORGANIZATION.founders || []).map((f) => ({
      '@type': 'Person',
      name: f,
    })),
    address: ORGANIZATION.address
      ? {
          '@type': 'PostalAddress',
          streetAddress: ORGANIZATION.address.streetAddress,
          addressLocality: ORGANIZATION.address.addressLocality,
          addressRegion: ORGANIZATION.address.addressRegion,
          postalCode: ORGANIZATION.address.postalCode,
          addressCountry: ORGANIZATION.address.addressCountry,
        }
      : undefined,
    contactPoint: ORGANIZATION.contact
      ? [
          {
            '@type': 'ContactPoint',
            email: ORGANIZATION.contact.email,
            telephone: ORGANIZATION.contact.telephone,
            contactType: ORGANIZATION.contact.contactType,
            areaServed: ORGANIZATION.contact.areaServed,
            availableLanguage: ORGANIZATION.contact.availableLanguage,
          },
        ]
      : undefined,
    sameAs: SOCIAL_LINKS,
  })}
/>
